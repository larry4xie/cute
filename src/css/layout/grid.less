// 12 grid
#grid > .core(@gridColumns);

// 固定布局
// Default 1020(1000) grid
#grid > .solid(@gridColumnWidth, @gridGutterWidth, @gridColumns);
// 1200(1180) grid
#grid > .solid(@gridColumnWidth1200, @gridGutterWidth1200, @gridColumns, "-1200");

// 流式布局
#grid > .fluid(@fluidGridColumnWidth, @fluidGridGutterWidth, @gridColumns);
#grid > .fluid(@fluidGridColumnWidthStingy, @fluidGridGutterWidthStingy, @gridColumns, "-stingy");

// mixins
#grid {
  // common
  .core (@gridColumns) {
    // grid span
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}
    .span (@columns) {
      _display:inline; // ie6 double margin
      float: left;
      min-height: 1px; // prevent collapsing columns
    }

    // generate .spanX
    .spanX (@gridColumns);
  }

  // 固定布局
  .solid (@gridColumnWidth, @gridGutterWidth, @gridColumns, @suffix: "") {
    // grid span
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}
    .span (@columns) {
      margin-left: @gridGutterWidth / 2;
      margin-right: @gridGutterWidth / 2;
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    }

    // grid offset
    .offsetX (@index) when (@index > 0) {
      (~".offset@{index}") { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}
    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 0.5));
    }

    // container
    (~".container@{suffix}") {
      // Set the container width
      margin-right: auto;
      margin-left: auto;
      .clearfix();
      width: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * (@gridColumns - 1));

      // row
      .row {
        .clearfix();
        margin-left: @gridGutterWidth * -0.5;
        margin-right: @gridGutterWidth * -0.5;

        // .spanX and .offsetX
        .spanX (@gridColumns);
        .offsetX (@gridColumns - 1);
      }
    }
  }

  // 流式布局
  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth, @gridColumns, @suffix: "") {
    // grid fluid span
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}
    .span (@columns) {
      margin-left: @fluidGridGutterWidth / 2;
      margin-right: @fluidGridGutterWidth / 2;
      width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
      *clear: right; // ie 67 width 100% bug
    }

    // grid fluid offset
    .offsetX (@index) when (@index > 0) {
      (~'.offset@{index}') { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}
    .offset (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns + 0.5));
    }

    // container-fluid
    (~".container-fluid@{suffix}"){
      //      margin-right: @gridGutterWidth / 2;
      //      margin-left: @gridGutterWidth / 2;
      .clearfix();

      // row-fluid
      .row {
        *overflow: hidden;
        width: 100%;
        .clearfix();

        // generate .spanX and .offsetX
        .spanX (@gridColumns);
        .offsetX (@gridColumns - 1);
      }
    }
  }
}